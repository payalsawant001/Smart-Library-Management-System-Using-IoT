// Generated by view binder compiler. Do not edit!
package com.akash.booklibrary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.akash.booklibrary.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemOrderDetailsItemNewBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView txtProductAmount;

  @NonNull
  public final TextView txtProductName;

  @NonNull
  public final TextView txtProductQuantity;

  @NonNull
  public final TextView txtProductSubTotal;

  private ItemOrderDetailsItemNewBinding(@NonNull CardView rootView,
      @NonNull TextView txtProductAmount, @NonNull TextView txtProductName,
      @NonNull TextView txtProductQuantity, @NonNull TextView txtProductSubTotal) {
    this.rootView = rootView;
    this.txtProductAmount = txtProductAmount;
    this.txtProductName = txtProductName;
    this.txtProductQuantity = txtProductQuantity;
    this.txtProductSubTotal = txtProductSubTotal;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemOrderDetailsItemNewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemOrderDetailsItemNewBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_order_details_item_new, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemOrderDetailsItemNewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.txtProductAmount;
      TextView txtProductAmount = ViewBindings.findChildViewById(rootView, id);
      if (txtProductAmount == null) {
        break missingId;
      }

      id = R.id.txtProductName;
      TextView txtProductName = ViewBindings.findChildViewById(rootView, id);
      if (txtProductName == null) {
        break missingId;
      }

      id = R.id.txtProductQuantity;
      TextView txtProductQuantity = ViewBindings.findChildViewById(rootView, id);
      if (txtProductQuantity == null) {
        break missingId;
      }

      id = R.id.txtProductSubTotal;
      TextView txtProductSubTotal = ViewBindings.findChildViewById(rootView, id);
      if (txtProductSubTotal == null) {
        break missingId;
      }

      return new ItemOrderDetailsItemNewBinding((CardView) rootView, txtProductAmount,
          txtProductName, txtProductQuantity, txtProductSubTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
